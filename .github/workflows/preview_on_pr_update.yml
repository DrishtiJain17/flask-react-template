name: preview_on_pr_update
# only run when updating an 'Open' PR  # retry fix

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:

  sanitize_branch:
    runs-on: ubuntu-latest
    outputs:
      sanitized_branch: ${{ steps.sanitize.outputs.clean_name }}
    steps:
      - name: Sanitize Branch Name for Docker Tag
        id: sanitize
        run: |
          BRANCH_REF="${{ github.event.pull_request.head.ref }}"
          SANITIZED_BRANCH=$(echo "${BRANCH_REF}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9\._-]/-/g')
          SANITIZED_BRANCH=$(echo "$SANITIZED_BRANCH" | sed 's/^-*//;s/-*$//;s/^\.*//;s/\.*$//')

          echo "Original branch: $BRANCH_REF"
          echo "Sanitized branch: $SANITIZED_BRANCH"
          echo "clean_name=$SANITIZED_BRANCH" >> $GITHUB_OUTPUT
  
  preview:
    # only run when updating an 'Open' PR
    needs: sanitize_branch
    if: github.event.pull_request.state == 'open'
    uses: DrishtiJain17/github-ci/.github/workflows/ci.yml@main
    concurrency:
      group: ci-preview-${{ needs.sanitize_branch.outputs.sanitized_branch }}
      cancel-in-progress: true
    with:
      hosting_provider: ${{ vars.HOSTING_PROVIDER }} # 'DIGITAL_OCEAN' or 'AWS'
      analyze_base: main
      app_name: frm-boilerplate
      app_env: preview
      app_hostname: '{1}.preview.platform.bettrhq.com'
      branch: ${{ needs.sanitize_branch.outputs.sanitized_branch }}
      build_args: |
        APP_ENV=preview
      checks: "['npm:coverage', 'npm:lint', 'compose:test']"
      docker_registry: ${{ vars.DOCKER_REGISTRY }}
      docker_username: ${{ vars.DOCKER_USERNAME }}
      aws_cluster_name: ${{ vars.AWS_CLUSTER_NAME }}
      aws_region: ${{ vars.AWS_REGION }}
      pull_request_number: ${{ github.event.number }}
      sonar_host_url: ${{ vars.SONAR_HOST_URL }}
      do_cluster_id: ${{ vars.DO_CLUSTER_ID }}
    secrets:
      docker_password: ${{ secrets.DOCKER_PASSWORD }}
      doppler_token: ${{ secrets.DOPPLER_PREVIEW_TOKEN }}
      aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      do_access_token: ${{ secrets.DO_ACCESS_TOKEN }}
      sonar_token: ${{ secrets.SONAR_TOKEN }}
